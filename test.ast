(source_file
  (func_decl "baskara(a:b:c:)" interface type='(Double, Double, Double) -> ()' access=internal
    (parameter_list
      (parameter "a" apiName=a type='Double' interface type='Double')
      (parameter "b" apiName=b type='Double' interface type='Double')
      (parameter "c" apiName=c type='Double' interface type='Double'))
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Double' 'delta')
        (binary_expr type='Double' location=<<testFilePath>>:2:18 range=[<<testFilePath>>:2:14 - line:2:24] nothrow
          (dot_syntax_call_expr implicit type='(Double, Double) -> Double' location=<<testFilePath>>:2:18 range=[<<testFilePath>>:2:18 - line:2:18] nothrow
            (declref_expr type='(Double.Type) -> (Double, Double) -> Double' location=<<testFilePath>>:2:18 range=[<<testFilePath>>:2:18 - line:2:18] decl=Swift.(file).Double.- function_ref=unapplied)
            (type_expr implicit type='Double.Type' location=<<testFilePath>>:2:18 range=[<<testFilePath>>:2:18 - line:2:18] typerepr='Double'))
          (tuple_expr implicit type='(Double, Double)' location=<<testFilePath>>:2:14 range=[<<testFilePath>>:2:14 - line:2:24]
            (binary_expr type='Double' location=<<testFilePath>>:2:15 range=[<<testFilePath>>:2:14 - line:2:16] nothrow
              (dot_syntax_call_expr implicit type='(Double, Double) -> Double' location=<<testFilePath>>:2:15 range=[<<testFilePath>>:2:15 - line:2:15] nothrow
                (declref_expr type='(Double.Type) -> (Double, Double) -> Double' location=<<testFilePath>>:2:15 range=[<<testFilePath>>:2:15 - line:2:15] decl=Swift.(file).Double.* function_ref=unapplied)
                (type_expr implicit type='Double.Type' location=<<testFilePath>>:2:15 range=[<<testFilePath>>:2:15 - line:2:15] typerepr='Double'))
              (tuple_expr implicit type='(Double, Double)' location=<<testFilePath>>:2:14 range=[<<testFilePath>>:2:14 - line:2:16]
                (declref_expr type='Double' location=<<testFilePath>>:2:14 range=[<<testFilePath>>:2:14 - line:2:14] decl=test.(file).baskara(a:b:c:).b@<<testFilePath>>:1:25 function_ref=unapplied)
                (declref_expr type='Double' location=<<testFilePath>>:2:16 range=[<<testFilePath>>:2:16 - line:2:16] decl=test.(file).baskara(a:b:c:).b@<<testFilePath>>:1:25 function_ref=unapplied)))
            (binary_expr type='Double' location=<<testFilePath>>:2:23 range=[<<testFilePath>>:2:20 - line:2:24] nothrow
              (dot_syntax_call_expr implicit type='(Double, Double) -> Double' location=<<testFilePath>>:2:23 range=[<<testFilePath>>:2:23 - line:2:23] nothrow
                (declref_expr type='(Double.Type) -> (Double, Double) -> Double' location=<<testFilePath>>:2:23 range=[<<testFilePath>>:2:23 - line:2:23] decl=Swift.(file).Double.* function_ref=unapplied)
                (type_expr implicit type='Double.Type' location=<<testFilePath>>:2:23 range=[<<testFilePath>>:2:23 - line:2:23] typerepr='Double'))
              (tuple_expr implicit type='(Double, Double)' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:24]
                (binary_expr type='Double' location=<<testFilePath>>:2:21 range=[<<testFilePath>>:2:20 - line:2:22] nothrow
                  (dot_syntax_call_expr implicit type='(Double, Double) -> Double' location=<<testFilePath>>:2:21 range=[<<testFilePath>>:2:21 - line:2:21] nothrow
                    (declref_expr type='(Double.Type) -> (Double, Double) -> Double' location=<<testFilePath>>:2:21 range=[<<testFilePath>>:2:21 - line:2:21] decl=Swift.(file).Double.* function_ref=unapplied)
                    (type_expr implicit type='Double.Type' location=<<testFilePath>>:2:21 range=[<<testFilePath>>:2:21 - line:2:21] typerepr='Double'))
                  (tuple_expr implicit type='(Double, Double)' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:22]
                    (call_expr implicit type='Double' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] nothrow arg_labels=_builtinIntegerLiteral:
                      (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] nothrow
                        (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
                        (type_expr implicit type='Double.Type' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] typerepr='Double'))
                      (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] names=_builtinIntegerLiteral
                        (integer_literal_expr type='Int2048' location=<<testFilePath>>:2:20 range=[<<testFilePath>>:2:20 - line:2:20] value=4)))
                    (declref_expr type='Double' location=<<testFilePath>>:2:22 range=[<<testFilePath>>:2:22 - line:2:22] decl=test.(file).baskara(a:b:c:).a@<<testFilePath>>:1:14 function_ref=unapplied)))
                (declref_expr type='Double' location=<<testFilePath>>:2:24 range=[<<testFilePath>>:2:24 - line:2:24] decl=test.(file).baskara(a:b:c:).c@<<testFilePath>>:1:36 function_ref=unapplied))))))

      (var_decl "delta" type='Double' interface type='Double' access=private let storage_kind=stored)
)))
