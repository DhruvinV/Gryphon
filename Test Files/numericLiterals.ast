(source_file
  (func_decl "foo(int:double:)" interface type='(Int, Double) -> ()' access=internal
    (parameter_list
      (parameter "int" apiName=int type='Int' interface type='Int')
      (parameter "double" apiName=double type='Double' interface type='Double'))
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:2:2 range=[<<testFilePath>>:2:2 - line:2:11] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:2:2 range=[<<testFilePath>>:2:2 - line:2:2] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:2:8 range=[<<testFilePath>>:2:7 - line:2:11] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:2:8 range=[<<testFilePath>>:2:7 - line:2:11]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:2:8 range=[<<testFilePath>>:2:8 - line:2:8]
              (declref_expr type='Int' location=<<testFilePath>>:2:8 range=[<<testFilePath>>:2:8 - line:2:8] decl=numericLiterals.(file).foo(int:double:).int@<<testFilePath>>:1:10 function_ref=unapplied)))))
      (call_expr type='()' location=<<testFilePath>>:3:2 range=[<<testFilePath>>:3:2 - line:3:14] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:3:2 range=[<<testFilePath>>:3:2 - line:3:2] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:3:8 range=[<<testFilePath>>:3:7 - line:3:14] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:3:8 range=[<<testFilePath>>:3:7 - line:3:14]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:3:8 range=[<<testFilePath>>:3:8 - line:3:8]
              (declref_expr type='Double' location=<<testFilePath>>:3:8 range=[<<testFilePath>>:3:8 - line:3:8] decl=numericLiterals.(file).foo(int:double:).double@<<testFilePath>>:1:20 function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Int' 'int1')
        (call_expr implicit type='Int' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] nothrow
            (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] names=_builtinIntegerLiteral
            (integer_literal_expr type='Int2048' location=<<testFilePath>>:6:12 range=[<<testFilePath>>:6:12 - line:6:12] value=0))))
))
  (var_decl "int1" type='Int' interface type='Int' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Int' 'int2')
        (call_expr implicit type='Int' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] nothrow
            (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] names=_builtinIntegerLiteral
            (integer_literal_expr type='Int2048' location=<<testFilePath>>:7:12 range=[<<testFilePath>>:7:12 - line:7:12] value=3))))
))
  (var_decl "int2" type='Int' interface type='Int' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Int' 'int3')
        (binary_expr type='Int' location=<<testFilePath>>:8:17 range=[<<testFilePath>>:8:12 - line:8:19] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=<<testFilePath>>:8:17 range=[<<testFilePath>>:8:17 - line:8:17] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=<<testFilePath>>:8:17 range=[<<testFilePath>>:8:17 - line:8:17] decl=Swift.(file).Int.+ function_ref=unapplied)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:8:17 range=[<<testFilePath>>:8:17 - line:8:17] typerepr='Int'))
          (tuple_expr implicit type='(Int, Int)' location=<<testFilePath>>:8:12 range=[<<testFilePath>>:8:12 - line:8:19]
            (declref_expr type='Int' location=<<testFilePath>>:8:12 range=[<<testFilePath>>:8:12 - line:8:12] decl=numericLiterals.(file).int1@<<testFilePath>>:6:5 direct_to_storage function_ref=unapplied)
            (declref_expr type='Int' location=<<testFilePath>>:8:19 range=[<<testFilePath>>:8:19 - line:8:19] decl=numericLiterals.(file).int2@<<testFilePath>>:7:5 direct_to_storage function_ref=unapplied))))
))
  (var_decl "int3" type='Int' interface type='Int' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_typed type='Double'
          (pattern_named type='Double' 'double1')
          (type_ident
            (component id='Double' bind=Swift.(file).Double)))
        (call_expr implicit type='Double' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] nothrow
            (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Double.Type' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] typerepr='Double'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] names=_builtinIntegerLiteral
            (integer_literal_expr type='Int2048' location=<<testFilePath>>:10:23 range=[<<testFilePath>>:10:23 - line:10:23] value=0))))
))
  (var_decl "double1" type='Double' interface type='Double' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_typed type='Double'
          (pattern_named type='Double' 'double2')
          (type_ident
            (component id='Double' bind=Swift.(file).Double)))
        (call_expr implicit type='Double' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] nothrow
            (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Double.Type' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] typerepr='Double'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] names=_builtinIntegerLiteral
            (integer_literal_expr type='Int2048' location=<<testFilePath>>:11:23 range=[<<testFilePath>>:11:23 - line:11:23] value=3))))
))
  (var_decl "double2" type='Double' interface type='Double' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Double' 'double3')
        (binary_expr type='Double' location=<<testFilePath>>:12:23 range=[<<testFilePath>>:12:15 - line:12:25] nothrow
          (dot_syntax_call_expr implicit type='(Double, Double) -> Double' location=<<testFilePath>>:12:23 range=[<<testFilePath>>:12:23 - line:12:23] nothrow
            (declref_expr type='(Double.Type) -> (Double, Double) -> Double' location=<<testFilePath>>:12:23 range=[<<testFilePath>>:12:23 - line:12:23] decl=Swift.(file).Double.+ function_ref=unapplied)
            (type_expr implicit type='Double.Type' location=<<testFilePath>>:12:23 range=[<<testFilePath>>:12:23 - line:12:23] typerepr='Double'))
          (tuple_expr implicit type='(Double, Double)' location=<<testFilePath>>:12:15 range=[<<testFilePath>>:12:15 - line:12:25]
            (declref_expr type='Double' location=<<testFilePath>>:12:15 range=[<<testFilePath>>:12:15 - line:12:15] decl=numericLiterals.(file).double1@<<testFilePath>>:10:5 direct_to_storage function_ref=unapplied)
            (declref_expr type='Double' location=<<testFilePath>>:12:25 range=[<<testFilePath>>:12:25 - line:12:25] decl=numericLiterals.(file).double2@<<testFilePath>>:11:5 direct_to_storage function_ref=unapplied))))
))
  (var_decl "double3" type='Double' interface type='Double' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:14:1 range=[<<testFilePath>>:14:1 - line:14:11] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:14:1 range=[<<testFilePath>>:14:1 - line:14:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:14:7 range=[<<testFilePath>>:14:6 - line:14:11] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:14:7 range=[<<testFilePath>>:14:6 - line:14:11]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:14:7 range=[<<testFilePath>>:14:7 - line:14:7]
              (declref_expr type='Int' location=<<testFilePath>>:14:7 range=[<<testFilePath>>:14:7 - line:14:7] decl=numericLiterals.(file).int1@<<testFilePath>>:6:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:15:1 range=[<<testFilePath>>:15:1 - line:15:11] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:15:1 range=[<<testFilePath>>:15:1 - line:15:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:15:7 range=[<<testFilePath>>:15:6 - line:15:11] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:15:7 range=[<<testFilePath>>:15:6 - line:15:11]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:15:7 range=[<<testFilePath>>:15:7 - line:15:7]
              (declref_expr type='Int' location=<<testFilePath>>:15:7 range=[<<testFilePath>>:15:7 - line:15:7] decl=numericLiterals.(file).int2@<<testFilePath>>:7:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:16:1 range=[<<testFilePath>>:16:1 - line:16:11] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:16:1 range=[<<testFilePath>>:16:1 - line:16:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:16:7 range=[<<testFilePath>>:16:6 - line:16:11] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:16:7 range=[<<testFilePath>>:16:6 - line:16:11]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:16:7 range=[<<testFilePath>>:16:7 - line:16:7]
              (declref_expr type='Int' location=<<testFilePath>>:16:7 range=[<<testFilePath>>:16:7 - line:16:7] decl=numericLiterals.(file).int3@<<testFilePath>>:8:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:17:1 range=[<<testFilePath>>:17:1 - line:17:14] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:17:1 range=[<<testFilePath>>:17:1 - line:17:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:17:7 range=[<<testFilePath>>:17:6 - line:17:14] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:17:7 range=[<<testFilePath>>:17:6 - line:17:14]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:17:7 range=[<<testFilePath>>:17:7 - line:17:7]
              (declref_expr type='Double' location=<<testFilePath>>:17:7 range=[<<testFilePath>>:17:7 - line:17:7] decl=numericLiterals.(file).double1@<<testFilePath>>:10:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:18:1 range=[<<testFilePath>>:18:1 - line:18:14] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:18:1 range=[<<testFilePath>>:18:1 - line:18:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:18:7 range=[<<testFilePath>>:18:6 - line:18:14] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:18:7 range=[<<testFilePath>>:18:6 - line:18:14]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:18:7 range=[<<testFilePath>>:18:7 - line:18:7]
              (declref_expr type='Double' location=<<testFilePath>>:18:7 range=[<<testFilePath>>:18:7 - line:18:7] decl=numericLiterals.(file).double2@<<testFilePath>>:11:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:19:1 range=[<<testFilePath>>:19:1 - line:19:14] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:19:1 range=[<<testFilePath>>:19:1 - line:19:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:6 - line:19:14] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:6 - line:19:14]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:7 - line:19:7]
              (declref_expr type='Double' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:7 - line:19:7] decl=numericLiterals.(file).double3@<<testFilePath>>:12:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:21:1 range=[<<testFilePath>>:21:1 - line:21:22] nothrow arg_labels=int:double:
        (declref_expr type='(Int, Double) -> ()' location=<<testFilePath>>:21:1 range=[<<testFilePath>>:21:1 - line:21:1] decl=numericLiterals.(file).foo(int:double:)@<<testFilePath>>:1:6 function_ref=single)
        (tuple_expr type='(int: Int, double: Double)' location=<<testFilePath>>:21:4 range=[<<testFilePath>>:21:4 - line:21:22] names=int,double
          (call_expr implicit type='Int' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] nothrow arg_labels=_builtinIntegerLiteral:
            (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] nothrow
              (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] typerepr='Int'))
            (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] names=_builtinIntegerLiteral
              (integer_literal_expr type='Int2048' location=<<testFilePath>>:21:10 range=[<<testFilePath>>:21:10 - line:21:10] value=5)))
          (call_expr implicit type='Double' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] nothrow arg_labels=_builtinIntegerLiteral:
            (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] nothrow
              (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
              (type_expr implicit type='Double.Type' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] typerepr='Double'))
            (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] names=_builtinIntegerLiteral
              (integer_literal_expr type='Int2048' location=<<testFilePath>>:21:21 range=[<<testFilePath>>:21:21 - line:21:21] value=5))))))))
