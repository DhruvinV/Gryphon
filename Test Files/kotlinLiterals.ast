(source_file
  (func_decl "GRYIgnoreNext()" interface type='() -> ()' access=internal
    (parameter_list)
    (brace_stmt))
  (func_decl "GRYInsert(_:)" interface type='(String) -> ()' access=internal
    (parameter_list
      (parameter "kotlinExpression" type='String' interface type='String'))
    (brace_stmt))
  (func_decl "GRYAlternative(swift:kotlin:)" <T> interface type='<T> (swift: T, kotlin: String) -> T' access=internal captures=(<generic> )
    (parameter_list
      (parameter "swiftExpression" apiName=swift type='T' interface type='T')
      (parameter "kotlinExpression" apiName=kotlin type='String' interface type='String'))
    (result
      (type_ident
        (component id='T' bind=kotlinLiterals.(file).GRYAlternative(swift:kotlin:).T@<<testFilePath>>:21:21)))
    (brace_stmt
      (return_stmt
        (declref_expr type='T' location=<<testFilePath>>:22:9 range=[<<testFilePath>>:22:9 - line:22:9] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:).swiftExpression@<<testFilePath>>:21:30 function_ref=unapplied))))
  (protocol "GRYIgnore" <Self : GRYIgnore> interface type='GRYIgnore.Protocol' access=internal @_fixed_layout requirement signature=<Self>)
  (import_decl 'Foundation')
  (func_decl "GRYDeclarations()" interface type='() -> ()' access=private
    (parameter_list)
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:32:2 range=[<<testFilePath>>:32:2 - line:32:32] nothrow arg_labels=_:
        (declref_expr type='(String) -> ()' location=<<testFilePath>>:32:2 range=[<<testFilePath>>:32:2 - line:32:2] decl=kotlinLiterals.(file).GRYInsert@<<testFilePath>>:19:6 function_ref=single)
        (paren_expr type='(String)' location=<<testFilePath>>:32:12 range=[<<testFilePath>>:32:11 - line:32:32]
          (string_literal_expr type='String' location=<<testFilePath>>:32:12 range=[<<testFilePath>>:32:12 - line:32:12] encoding=utf8 value="import java.util.*" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='String' 'languageName')
        (call_expr type='String' location=<<testFilePath>>:36:20 range=[<<testFilePath>>:36:20 - line:36:71] nothrow arg_labels=swift:kotlin:
          (declref_expr type='(String, String) -> String' location=<<testFilePath>>:36:20 range=[<<testFilePath>>:36:20 - line:36:20] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:21:6 [with String] function_ref=single)
          (tuple_expr type='(swift: String, kotlin: String)' location=<<testFilePath>>:36:34 range=[<<testFilePath>>:36:34 - line:36:71] names=swift,kotlin
            (string_literal_expr type='String' location=<<testFilePath>>:36:42 range=[<<testFilePath>>:36:42 - line:36:42] encoding=utf8 value="swift" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
            (string_literal_expr type='String' location=<<testFilePath>>:36:59 range=[<<testFilePath>>:36:59 - line:36:59] encoding=utf8 value="\"kotlin\"" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))
))
  (var_decl "languageName" type='String' interface type='String' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:37:1 range=[<<testFilePath>>:37:1 - line:37:36] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:37:1 range=[<<testFilePath>>:37:1 - line:37:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:37:7 range=[<<testFilePath>>:37:6 - line:37:36] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:37:7 range=[<<testFilePath>>:37:6 - line:37:36]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:37:7 range=[<<testFilePath>>:37:7 - line:37:7]
              (interpolated_string_literal_expr type='String' location=<<testFilePath>>:37:7 range=[<<testFilePath>>:37:7 - line:37:7]
                (string_literal_expr type='String' location=<<testFilePath>>:37:7 range=[<<testFilePath>>:37:7 - line:37:7] encoding=utf8 value="Hello from " builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (paren_expr type='(String)' location=<<testFilePath>>:37:21 range=[<<testFilePath>>:37:20 - line:37:33]
                  (declref_expr type='String' location=<<testFilePath>>:37:21 range=[<<testFilePath>>:37:21 - line:37:21] decl=kotlinLiterals.(file).languageName@<<testFilePath>>:36:5 direct_to_storage function_ref=unapplied))
                (string_literal_expr type='String' location=<<testFilePath>>:37:34 range=[<<testFilePath>>:37:34 - line:37:34] encoding=utf8 value="!" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Int' 'magicNumber')
        (binary_expr type='Int' location=<<testFilePath>>:39:22 range=[<<testFilePath>>:39:19 - line:39:62] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=<<testFilePath>>:39:22 range=[<<testFilePath>>:39:22 - line:39:22] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=<<testFilePath>>:39:22 range=[<<testFilePath>>:39:22 - line:39:22] decl=Swift.(file).Int.+ function_ref=unapplied)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:39:22 range=[<<testFilePath>>:39:22 - line:39:22] typerepr='Int'))
          (tuple_expr implicit type='(Int, Int)' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:62]
            (call_expr implicit type='Int' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] nothrow arg_labels=_builtinIntegerLiteral:
              (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] nothrow
                (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                (type_expr implicit type='Int.Type' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] typerepr='Int'))
              (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] names=_builtinIntegerLiteral
                (integer_literal_expr type='Int2048' location=<<testFilePath>>:39:19 range=[<<testFilePath>>:39:19 - line:39:19] value=40)))
            (call_expr type='Int' location=<<testFilePath>>:39:24 range=[<<testFilePath>>:39:24 - line:39:62] nothrow arg_labels=swift:kotlin:
              (declref_expr type='(Int, String) -> Int' location=<<testFilePath>>:39:24 range=[<<testFilePath>>:39:24 - line:39:24] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:21:6 [with Int] function_ref=double)
              (tuple_expr type='(swift: Int, kotlin: String)' location=<<testFilePath>>:39:38 range=[<<testFilePath>>:39:38 - line:39:62] names=swift,kotlin
                (call_expr implicit type='Int' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] nothrow
                    (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Int2048' location=<<testFilePath>>:39:46 range=[<<testFilePath>>:39:46 - line:39:46] value=2)))
                (string_literal_expr type='String' location=<<testFilePath>>:39:57 range=[<<testFilePath>>:39:57 - line:39:57] encoding=utf8 value="5-3" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))))
))
  (var_decl "magicNumber" type='Int' interface type='Int' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:40:1 range=[<<testFilePath>>:40:1 - line:40:18] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:40:1 range=[<<testFilePath>>:40:1 - line:40:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:40:7 range=[<<testFilePath>>:40:6 - line:40:18] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:40:7 range=[<<testFilePath>>:40:6 - line:40:18]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:40:7 range=[<<testFilePath>>:40:7 - line:40:7]
              (declref_expr type='Int' location=<<testFilePath>>:40:7 range=[<<testFilePath>>:40:7 - line:40:7] decl=kotlinLiterals.(file).magicNumber@<<testFilePath>>:39:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:43:1 range=[<<testFilePath>>:43:1 - line:43:75] nothrow arg_labels=_:
        (declref_expr type='(String) -> ()' location=<<testFilePath>>:43:1 range=[<<testFilePath>>:43:1 - line:43:1] decl=kotlinLiterals.(file).GRYInsert@<<testFilePath>>:19:6 function_ref=single)
        (paren_expr type='(String)' location=<<testFilePath>>:43:11 range=[<<testFilePath>>:43:10 - line:43:75]
          (string_literal_expr type='String' location=<<testFilePath>>:43:11 range=[<<testFilePath>>:43:11 - line:43:11] encoding=utf8 value="println(\"This will be ignored by swift, but not by kotlin.\")" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:46:1 range=[<<testFilePath>>:46:1 - line:46:15] nothrow arg_labels=
        (declref_expr type='() -> ()' location=<<testFilePath>>:46:1 range=[<<testFilePath>>:46:1 - line:46:1] decl=kotlinLiterals.(file).GRYIgnoreNext()@<<testFilePath>>:17:6 function_ref=single)
        (tuple_expr type='()' location=<<testFilePath>>:46:14 range=[<<testFilePath>>:46:14 - line:46:15]))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:47:1 range=[<<testFilePath>>:47:1 - line:47:58] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:47:1 range=[<<testFilePath>>:47:1 - line:47:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:47:7 range=[<<testFilePath>>:47:6 - line:47:58] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:47:7 range=[<<testFilePath>>:47:6 - line:47:58]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:47:7 range=[<<testFilePath>>:47:7 - line:47:7]
              (string_literal_expr type='String' location=<<testFilePath>>:47:7 range=[<<testFilePath>>:47:7 - line:47:7] encoding=utf8 value="This will be ignored by kotlin, but not by swift." builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Double' 'squareRoot')
        (call_expr type='Double' location=<<testFilePath>>:50:18 range=[<<testFilePath>>:50:18 - line:50:73] nothrow arg_labels=swift:kotlin:
          (declref_expr type='(Double, String) -> Double' location=<<testFilePath>>:50:18 range=[<<testFilePath>>:50:18 - line:50:18] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:21:6 [with Double] function_ref=single)
          (tuple_expr type='(swift: Double, kotlin: String)' location=<<testFilePath>>:50:32 range=[<<testFilePath>>:50:32 - line:50:73] names=swift,kotlin
            (call_expr type='Double' location=<<testFilePath>>:50:40 range=[<<testFilePath>>:50:40 - line:50:46] nothrow arg_labels=_:
              (declref_expr type='(Double) -> Double' location=<<testFilePath>>:50:40 range=[<<testFilePath>>:50:40 - line:50:40] decl=Darwin.(file).sqrt function_ref=single)
              (paren_expr type='(Double)' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:44 - line:50:46]
                (call_expr implicit type='Double' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] nothrow
                    (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Double.Type' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] typerepr='Double'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Int2048' location=<<testFilePath>>:50:45 range=[<<testFilePath>>:50:45 - line:50:45] value=9)))))
            (string_literal_expr type='String' location=<<testFilePath>>:50:57 range=[<<testFilePath>>:50:57 - line:50:57] encoding=utf8 value="Math.sqrt(9.0)" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))
))
  (var_decl "squareRoot" type='Double' interface type='Double' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:51:1 range=[<<testFilePath>>:51:1 - line:51:17] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:51:1 range=[<<testFilePath>>:51:1 - line:51:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:51:7 range=[<<testFilePath>>:51:6 - line:51:17] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:51:7 range=[<<testFilePath>>:51:6 - line:51:17]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:51:7 range=[<<testFilePath>>:51:7 - line:51:7]
              (declref_expr type='Double' location=<<testFilePath>>:51:7 range=[<<testFilePath>>:51:7 - line:51:7] decl=kotlinLiterals.(file).squareRoot@<<testFilePath>>:50:5 direct_to_storage function_ref=unapplied)))))))
  (class_decl "IgnoredClass" interface type='IgnoredClass.Type' access=internal @_fixed_layout inherits: GRYIgnore
    (destructor_decl implicit "deinit" interface type='(IgnoredClass) -> () -> ()' access=internal @objc
      (parameter_list
        (parameter "self" interface type='IgnoredClass'))
      (brace_stmt))
    (constructor_decl implicit "init()" interface type='(IgnoredClass.Type) -> () -> IgnoredClass' access=internal designated
      (parameter_list
        (parameter "self" type='IgnoredClass' interface type='IgnoredClass'))
      (parameter_list)
      (brace_stmt
        (return_stmt implicit))))
  (enum_decl "IgnoredEnum" interface type='IgnoredEnum.Type' access=internal @_fixed_layout inherits: GRYIgnore))
