(source_file
  (func_decl "GRYIgnoreNext()" interface type='() -> ()' access=internal
    (parameter_list)
    (brace_stmt))
  (func_decl "GRYInsert(_:)" interface type='(String) -> ()' access=internal
    (parameter_list
      (parameter "kotlinExpression" type='String' interface type='String'))
    (brace_stmt))
  (func_decl "GRYAlternative(swift:kotlin:)" <T> interface type='<T> (swift: T, kotlin: String) -> T' access=internal captures=(<generic> )
    (parameter_list
      (parameter "swiftExpression" apiName=swift type='T' interface type='T')
      (parameter "kotlinExpression" apiName=kotlin type='String' interface type='String'))
    (result
      (type_ident
        (component id='T' bind=kotlinLiterals.(file).GRYAlternative(swift:kotlin:).T@<<testFilePath>>:5:21)))
    (brace_stmt
      (return_stmt
        (declref_expr type='T' location=<<testFilePath>>:6:9 range=[<<testFilePath>>:6:9 - line:6:9] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:).swiftExpression@<<testFilePath>>:5:30 function_ref=unapplied))))
  (import_decl 'Foundation')
  (func_decl "GRYDeclarations()" interface type='() -> ()' access=private
    (parameter_list)
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:14:2 range=[<<testFilePath>>:14:2 - line:14:32] nothrow arg_labels=_:
        (declref_expr type='(String) -> ()' location=<<testFilePath>>:14:2 range=[<<testFilePath>>:14:2 - line:14:2] decl=kotlinLiterals.(file).GRYInsert@<<testFilePath>>:3:6 function_ref=single)
        (paren_expr type='(String)' location=<<testFilePath>>:14:12 range=[<<testFilePath>>:14:11 - line:14:32]
          (string_literal_expr type='String' location=<<testFilePath>>:14:12 range=[<<testFilePath>>:14:12 - line:14:12] encoding=utf8 value="import java.util.*" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='String' 'languageName')
        (call_expr type='String' location=<<testFilePath>>:18:20 range=[<<testFilePath>>:18:20 - line:18:71] nothrow arg_labels=swift:kotlin:
          (declref_expr type='(String, String) -> String' location=<<testFilePath>>:18:20 range=[<<testFilePath>>:18:20 - line:18:20] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:5:6 [with String] function_ref=single)
          (tuple_expr type='(swift: String, kotlin: String)' location=<<testFilePath>>:18:34 range=[<<testFilePath>>:18:34 - line:18:71] names=swift,kotlin
            (string_literal_expr type='String' location=<<testFilePath>>:18:42 range=[<<testFilePath>>:18:42 - line:18:42] encoding=utf8 value="swift" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
            (string_literal_expr type='String' location=<<testFilePath>>:18:59 range=[<<testFilePath>>:18:59 - line:18:59] encoding=utf8 value="\"kotlin\"" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))
))
  (var_decl "languageName" type='String' interface type='String' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:19:1 range=[<<testFilePath>>:19:1 - line:19:36] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:19:1 range=[<<testFilePath>>:19:1 - line:19:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:6 - line:19:36] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:6 - line:19:36]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:7 - line:19:7]
              (interpolated_string_literal_expr type='String' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:7 - line:19:7]
                (string_literal_expr type='String' location=<<testFilePath>>:19:7 range=[<<testFilePath>>:19:7 - line:19:7] encoding=utf8 value="Hello from " builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                (paren_expr type='(String)' location=<<testFilePath>>:19:21 range=[<<testFilePath>>:19:20 - line:19:33]
                  (declref_expr type='String' location=<<testFilePath>>:19:21 range=[<<testFilePath>>:19:21 - line:19:21] decl=kotlinLiterals.(file).languageName@<<testFilePath>>:18:5 direct_to_storage function_ref=unapplied))
                (string_literal_expr type='String' location=<<testFilePath>>:19:34 range=[<<testFilePath>>:19:34 - line:19:34] encoding=utf8 value="!" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Int' 'magicNumber')
        (binary_expr type='Int' location=<<testFilePath>>:21:22 range=[<<testFilePath>>:21:19 - line:21:62] nothrow
          (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=<<testFilePath>>:21:22 range=[<<testFilePath>>:21:22 - line:21:22] nothrow
            (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=<<testFilePath>>:21:22 range=[<<testFilePath>>:21:22 - line:21:22] decl=Swift.(file).Int.+ function_ref=unapplied)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:21:22 range=[<<testFilePath>>:21:22 - line:21:22] typerepr='Int'))
          (tuple_expr implicit type='(Int, Int)' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:62]
            (call_expr implicit type='Int' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] nothrow arg_labels=_builtinIntegerLiteral:
              (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] nothrow
                (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                (type_expr implicit type='Int.Type' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] typerepr='Int'))
              (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] names=_builtinIntegerLiteral
                (integer_literal_expr type='Int2048' location=<<testFilePath>>:21:19 range=[<<testFilePath>>:21:19 - line:21:19] value=40)))
            (call_expr type='Int' location=<<testFilePath>>:21:24 range=[<<testFilePath>>:21:24 - line:21:62] nothrow arg_labels=swift:kotlin:
              (declref_expr type='(Int, String) -> Int' location=<<testFilePath>>:21:24 range=[<<testFilePath>>:21:24 - line:21:24] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:5:6 [with Int] function_ref=double)
              (tuple_expr type='(swift: Int, kotlin: String)' location=<<testFilePath>>:21:38 range=[<<testFilePath>>:21:38 - line:21:62] names=swift,kotlin
                (call_expr implicit type='Int' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] nothrow
                    (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Int.Type' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] typerepr='Int'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Int2048' location=<<testFilePath>>:21:46 range=[<<testFilePath>>:21:46 - line:21:46] value=2)))
                (string_literal_expr type='String' location=<<testFilePath>>:21:57 range=[<<testFilePath>>:21:57 - line:21:57] encoding=utf8 value="5-3" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))))
))
  (var_decl "magicNumber" type='Int' interface type='Int' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:22:1 range=[<<testFilePath>>:22:1 - line:22:18] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:22:1 range=[<<testFilePath>>:22:1 - line:22:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:22:7 range=[<<testFilePath>>:22:6 - line:22:18] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:22:7 range=[<<testFilePath>>:22:6 - line:22:18]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:22:7 range=[<<testFilePath>>:22:7 - line:22:7]
              (declref_expr type='Int' location=<<testFilePath>>:22:7 range=[<<testFilePath>>:22:7 - line:22:7] decl=kotlinLiterals.(file).magicNumber@<<testFilePath>>:21:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:25:1 range=[<<testFilePath>>:25:1 - line:25:75] nothrow arg_labels=_:
        (declref_expr type='(String) -> ()' location=<<testFilePath>>:25:1 range=[<<testFilePath>>:25:1 - line:25:1] decl=kotlinLiterals.(file).GRYInsert@<<testFilePath>>:3:6 function_ref=single)
        (paren_expr type='(String)' location=<<testFilePath>>:25:11 range=[<<testFilePath>>:25:10 - line:25:75]
          (string_literal_expr type='String' location=<<testFilePath>>:25:11 range=[<<testFilePath>>:25:11 - line:25:11] encoding=utf8 value="println(\"This will be ignored by swift, but not by kotlin.\")" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:28:1 range=[<<testFilePath>>:28:1 - line:28:15] nothrow arg_labels=
        (declref_expr type='() -> ()' location=<<testFilePath>>:28:1 range=[<<testFilePath>>:28:1 - line:28:1] decl=kotlinLiterals.(file).GRYIgnoreNext()@<<testFilePath>>:1:6 function_ref=single)
        (tuple_expr type='()' location=<<testFilePath>>:28:14 range=[<<testFilePath>>:28:14 - line:28:15]))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:29:1 range=[<<testFilePath>>:29:1 - line:29:58] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:29:1 range=[<<testFilePath>>:29:1 - line:29:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:29:7 range=[<<testFilePath>>:29:6 - line:29:58] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:29:7 range=[<<testFilePath>>:29:6 - line:29:58]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:29:7 range=[<<testFilePath>>:29:7 - line:29:7]
              (string_literal_expr type='String' location=<<testFilePath>>:29:7 range=[<<testFilePath>>:29:7 - line:29:7] encoding=utf8 value="This will be ignored by kotlin, but not by swift." builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='Double' 'squareRoot')
        (call_expr type='Double' location=<<testFilePath>>:32:18 range=[<<testFilePath>>:32:18 - line:32:73] nothrow arg_labels=swift:kotlin:
          (declref_expr type='(Double, String) -> Double' location=<<testFilePath>>:32:18 range=[<<testFilePath>>:32:18 - line:32:18] decl=kotlinLiterals.(file).GRYAlternative(swift:kotlin:)@<<testFilePath>>:5:6 [with Double] function_ref=single)
          (tuple_expr type='(swift: Double, kotlin: String)' location=<<testFilePath>>:32:32 range=[<<testFilePath>>:32:32 - line:32:73] names=swift,kotlin
            (call_expr type='Double' location=<<testFilePath>>:32:40 range=[<<testFilePath>>:32:40 - line:32:46] nothrow arg_labels=_:
              (declref_expr type='(Double) -> Double' location=<<testFilePath>>:32:40 range=[<<testFilePath>>:32:40 - line:32:40] decl=Darwin.(file).sqrt function_ref=single)
              (paren_expr type='(Double)' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:44 - line:32:46]
                (call_expr implicit type='Double' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] nothrow arg_labels=_builtinIntegerLiteral:
                  (constructor_ref_call_expr implicit type='(Int2048) -> Double' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] nothrow
                    (declref_expr implicit type='(Double.Type) -> (Int2048) -> Double' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] decl=Swift.(file).Double.init(_builtinIntegerLiteral:) function_ref=single)
                    (type_expr implicit type='Double.Type' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] typerepr='Double'))
                  (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] names=_builtinIntegerLiteral
                    (integer_literal_expr type='Int2048' location=<<testFilePath>>:32:45 range=[<<testFilePath>>:32:45 - line:32:45] value=9)))))
            (string_literal_expr type='String' location=<<testFilePath>>:32:57 range=[<<testFilePath>>:32:57 - line:32:57] encoding=utf8 value="Math.sqrt(9.0)" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**))))
))
  (var_decl "squareRoot" type='Double' interface type='Double' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:33:1 range=[<<testFilePath>>:33:1 - line:33:17] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:33:1 range=[<<testFilePath>>:33:1 - line:33:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:33:7 range=[<<testFilePath>>:33:6 - line:33:17] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:33:7 range=[<<testFilePath>>:33:6 - line:33:17]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:33:7 range=[<<testFilePath>>:33:7 - line:33:7]
              (declref_expr type='Double' location=<<testFilePath>>:33:7 range=[<<testFilePath>>:33:7 - line:33:7] decl=kotlinLiterals.(file).squareRoot@<<testFilePath>>:32:5 direct_to_storage function_ref=unapplied))))))))
