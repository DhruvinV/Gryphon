(source_file
  (protocol "GRYIgnore" <Self : GRYIgnore> interface type='GRYIgnore.Protocol' access=internal non-resilient requirement signature=<Self>)
  (class_decl "ArrayReference" <Element> interface type='ArrayReference<Element>.Type' access=internal non-resilient inherits: GRYIgnore, ExpressibleByArrayLiteral, CustomStringConvertible, CustomDebugStringConvertible, RandomAccessCollection, MutableCollection, RangeReplaceableCollection
    (typealias "ArrayLiteralElement" interface type='Element.Type' access=internal type='Element')
    (pattern_binding_decl
      (pattern_typed type='Array<Element>'
        (pattern_named type='Array<Element>' 'array')
        (type_ident
          (component id='Array' bind=Swift.(file).Array)
            (type_ident
              (component id='Element' bind=arrays.(file).ArrayReference.Element@<<testFilePath>>:24:22)))))
    (var_decl "array" type='Array<Element>' interface type='Array<Element>' access=internal storage_kind=stored_with_trivial_accessors
      (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Array<Element>' access=internal getter_for=array
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list)
        (brace_stmt
          (return_stmt implicit
            (load_expr implicit type='Array<Element>'
              (member_ref_expr implicit type='@lvalue Array<Element>' accessKind=read decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
                (declref_expr implicit type='ArrayReference<Element>' decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:30:6 function_ref=unapplied))))))
      (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Array<Element>) -> ()' access=internal setter_for=array
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list
          (parameter "value" type='Array<Element>' interface type='Array<Element>'))
        (brace_stmt
          (assign_expr
            (member_ref_expr implicit type='@lvalue Array<Element>' accessKind=write decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
              (declref_expr implicit type='ArrayReference<Element>' decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:30:6 function_ref=unapplied))
            (declref_expr implicit type='Array<Element>' decl=arrays.(file).ArrayReference.<anonymous>.value@<<testFilePath>>:30:6 function_ref=unapplied))))
      (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer) -> (Builtin.RawPointer, Builtin.RawPointer?)' access=internal materializeForSet_for=array
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list
          (parameter "buffer" type='Builtin.RawPointer' interface type='Builtin.RawPointer')
          (parameter "callbackStorage" type='inout Builtin.UnsafeValueBuffer' interface type='inout Builtin.UnsafeValueBuffer' inout))))
    (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Array<Element>' access=internal getter_for=array
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (return_stmt implicit
          (load_expr implicit type='Array<Element>'
            (member_ref_expr implicit type='@lvalue Array<Element>' accessKind=read decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
              (declref_expr implicit type='ArrayReference<Element>' decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:30:6 function_ref=unapplied))))))
    (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Array<Element>) -> ()' access=internal setter_for=array
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "value" type='Array<Element>' interface type='Array<Element>'))
      (brace_stmt
        (assign_expr
          (member_ref_expr implicit type='@lvalue Array<Element>' accessKind=write decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
            (declref_expr implicit type='ArrayReference<Element>' decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:30:6 function_ref=unapplied))
          (declref_expr implicit type='Array<Element>' decl=arrays.(file).ArrayReference.<anonymous>.value@<<testFilePath>>:30:6 function_ref=unapplied))))
    (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer) -> (Builtin.RawPointer, Builtin.RawPointer?)' access=internal materializeForSet_for=array
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "buffer" type='Builtin.RawPointer' interface type='Builtin.RawPointer')
        (parameter "callbackStorage" type='inout Builtin.UnsafeValueBuffer' interface type='inout Builtin.UnsafeValueBuffer' inout)))
    (constructor_decl "init(array:)" interface type='<Element> (ArrayReference<Element>.Type) -> (Array<Element>) -> ArrayReference<Element>' access=internal designated
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "array" apiName=array type='Array<Element>' interface type='Array<Element>'))
      (brace_stmt
        (assign_expr
          (member_ref_expr type='@lvalue Array<Element>' accessKind=write location=<<testFilePath>>:33:8 range=[<<testFilePath>>:33:3 - line:33:8] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
            (declref_expr type='ArrayReference<Element>' location=<<testFilePath>>:33:3 range=[<<testFilePath>>:33:3 - line:33:3] decl=arrays.(file).ArrayReference.init(array:).self@<<testFilePath>>:32:2 function_ref=unapplied))
          (declref_expr type='Array<Element>' location=<<testFilePath>>:33:16 range=[<<testFilePath>>:33:16 - line:33:16] decl=arrays.(file).ArrayReference.init(array:).array@<<testFilePath>>:32:7 function_ref=unapplied))
        (return_stmt implicit)))
    (constructor_decl "init(arrayLiteral:)" interface type='<Element> (ArrayReference<Element>.Type) -> (Element...) -> ArrayReference<Element>' access=internal required designated
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "elements" apiName=arrayLiteral type='[Element]' interface type='[Element]' variadic))
      (brace_stmt
        (assign_expr
          (member_ref_expr type='@lvalue Array<Element>' accessKind=write location=<<testFilePath>>:38:8 range=[<<testFilePath>>:38:3 - line:38:8] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
            (declref_expr type='ArrayReference<Element>' location=<<testFilePath>>:38:3 range=[<<testFilePath>>:38:3 - line:38:3] decl=arrays.(file).ArrayReference.init(arrayLiteral:).self@<<testFilePath>>:37:11 function_ref=unapplied))
          (declref_expr type='[Element]' location=<<testFilePath>>:38:16 range=[<<testFilePath>>:38:16 - line:38:16] decl=arrays.(file).ArrayReference.init(arrayLiteral:).elements@<<testFilePath>>:37:29 function_ref=unapplied))
        (return_stmt implicit)))
    (subscript_decl "subscript(_:)" interface type='<Element> (Int) -> Element' access=internal storage_kind=computed
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Int) -> Element' access=internal getter_for=subscript(_:)
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list
          (parameter "index" type='Int' interface type='Int'))
        (brace_stmt
          (return_stmt
            (load_expr implicit type='Element' location=<<testFilePath>>:44:16 range=[<<testFilePath>>:44:11 - line:44:22]
              (subscript_expr type='@lvalue Element' accessKind=read location=<<testFilePath>>:44:16 range=[<<testFilePath>>:44:11 - line:44:22]  decl=Swift.(file).Array.subscript [with Element] arg_labels=_:
                (inout_expr implicit type='inout Array<Element>' location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11]
                  (member_ref_expr type='@lvalue Array<Element>' accessKind=readwrite location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                    (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:43:3 function_ref=unapplied)))
                (paren_expr type='(Int)' location=<<testFilePath>>:44:17 range=[<<testFilePath>>:44:16 - line:44:22]
                  (declref_expr type='Int' location=<<testFilePath>>:44:17 range=[<<testFilePath>>:44:17 - line:44:17] decl=arrays.(file).ArrayReference.<anonymous>.index@<<testFilePath>>:42:15 function_ref=unapplied)))))))
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Element, Int) -> ()' access=internal setter_for=subscript(_:)
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list
          (parameter "newValue" type='Element' interface type='Element')
          (parameter "index" type='Int' interface type='Int'))
        (brace_stmt
          (assign_expr
            (subscript_expr type='@lvalue Element' accessKind=write location=<<testFilePath>>:47:9 range=[<<testFilePath>>:47:4 - line:47:15]  decl=Swift.(file).Array.subscript [with Element] arg_labels=_:
              (inout_expr implicit type='inout Array<Element>' location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=readwrite location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:46:3 function_ref=unapplied)))
              (paren_expr type='(Int)' location=<<testFilePath>>:47:10 range=[<<testFilePath>>:47:9 - line:47:15]
                (declref_expr type='Int' location=<<testFilePath>>:47:10 range=[<<testFilePath>>:47:10 - line:47:10] decl=arrays.(file).ArrayReference.<anonymous>.index@<<testFilePath>>:42:15 function_ref=unapplied)))
            (declref_expr type='Element' location=<<testFilePath>>:47:19 range=[<<testFilePath>>:47:19 - line:47:19] decl=arrays.(file).ArrayReference.<anonymous>.newValue@<<testFilePath>>:46:3 function_ref=unapplied))))
      (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, Int) -> (Builtin.RawPointer, Builtin.RawPointer?)' access=internal materializeForSet_for=subscript(_:)
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list
          (parameter "buffer" type='Builtin.RawPointer' interface type='Builtin.RawPointer')
          (parameter "callbackStorage" type='inout Builtin.UnsafeValueBuffer' interface type='inout Builtin.UnsafeValueBuffer' inout)
          (parameter "index" type='Int' interface type='Int'))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Int) -> Element' access=internal getter_for=subscript(_:)
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "index" type='Int' interface type='Int'))
      (brace_stmt
        (return_stmt
          (load_expr implicit type='Element' location=<<testFilePath>>:44:16 range=[<<testFilePath>>:44:11 - line:44:22]
            (subscript_expr type='@lvalue Element' accessKind=read location=<<testFilePath>>:44:16 range=[<<testFilePath>>:44:11 - line:44:22]  decl=Swift.(file).Array.subscript [with Element] arg_labels=_:
              (inout_expr implicit type='inout Array<Element>' location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=readwrite location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:44:11 range=[<<testFilePath>>:44:11 - line:44:11] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:43:3 function_ref=unapplied)))
              (paren_expr type='(Int)' location=<<testFilePath>>:44:17 range=[<<testFilePath>>:44:16 - line:44:22]
                (declref_expr type='Int' location=<<testFilePath>>:44:17 range=[<<testFilePath>>:44:17 - line:44:17] decl=arrays.(file).ArrayReference.<anonymous>.index@<<testFilePath>>:42:15 function_ref=unapplied)))))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Element, Int) -> ()' access=internal setter_for=subscript(_:)
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "newValue" type='Element' interface type='Element')
        (parameter "index" type='Int' interface type='Int'))
      (brace_stmt
        (assign_expr
          (subscript_expr type='@lvalue Element' accessKind=write location=<<testFilePath>>:47:9 range=[<<testFilePath>>:47:4 - line:47:15]  decl=Swift.(file).Array.subscript [with Element] arg_labels=_:
            (inout_expr implicit type='inout Array<Element>' location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=readwrite location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:47:4 range=[<<testFilePath>>:47:4 - line:47:4] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:46:3 function_ref=unapplied)))
            (paren_expr type='(Int)' location=<<testFilePath>>:47:10 range=[<<testFilePath>>:47:9 - line:47:15]
              (declref_expr type='Int' location=<<testFilePath>>:47:10 range=[<<testFilePath>>:47:10 - line:47:10] decl=arrays.(file).ArrayReference.<anonymous>.index@<<testFilePath>>:42:15 function_ref=unapplied)))
          (declref_expr type='Element' location=<<testFilePath>>:47:19 range=[<<testFilePath>>:47:19 - line:47:19] decl=arrays.(file).ArrayReference.<anonymous>.newValue@<<testFilePath>>:46:3 function_ref=unapplied))))
    (accessor_decl implicit 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> (Builtin.RawPointer, inout Builtin.UnsafeValueBuffer, Int) -> (Builtin.RawPointer, Builtin.RawPointer?)' access=internal materializeForSet_for=subscript(_:)
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "buffer" type='Builtin.RawPointer' interface type='Builtin.RawPointer')
        (parameter "callbackStorage" type='inout Builtin.UnsafeValueBuffer' interface type='inout Builtin.UnsafeValueBuffer' inout)
        (parameter "index" type='Int' interface type='Int')))
    (pattern_binding_decl
      (pattern_typed type='String'
        (pattern_named type='String' 'description')
        (type_ident
          (component id='String' bind=Swift.(file).String))))
    (var_decl "description" type='String' interface type='String' access=internal storage_kind=computed
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> String' access=internal getter_for=description
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list)
        (brace_stmt
          (return_stmt
            (member_ref_expr type='String' location=<<testFilePath>>:53:16 range=[<<testFilePath>>:53:10 - line:53:16] decl=Swift.(file).Array.description [with Element]
              (load_expr implicit type='Array<Element>' location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:52:26 function_ref=unapplied))))))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> String' access=internal getter_for=description
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (return_stmt
          (member_ref_expr type='String' location=<<testFilePath>>:53:16 range=[<<testFilePath>>:53:10 - line:53:16] decl=Swift.(file).Array.description [with Element]
            (load_expr implicit type='Array<Element>' location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:53:10 range=[<<testFilePath>>:53:10 - line:53:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:52:26 function_ref=unapplied)))))))
    (pattern_binding_decl
      (pattern_typed type='String'
        (pattern_named type='String' 'debugDescription')
        (type_ident
          (component id='String' bind=Swift.(file).String))))
    (var_decl "debugDescription" type='String' interface type='String' access=internal storage_kind=computed
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> String' access=internal getter_for=debugDescription
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list)
        (brace_stmt
          (return_stmt
            (member_ref_expr type='String' location=<<testFilePath>>:57:16 range=[<<testFilePath>>:57:10 - line:57:16] decl=Swift.(file).Array.debugDescription [with Element]
              (load_expr implicit type='Array<Element>' location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:56:31 function_ref=unapplied))))))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> String' access=internal getter_for=debugDescription
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (return_stmt
          (member_ref_expr type='String' location=<<testFilePath>>:57:16 range=[<<testFilePath>>:57:10 - line:57:16] decl=Swift.(file).Array.debugDescription [with Element]
            (load_expr implicit type='Array<Element>' location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:57:10 range=[<<testFilePath>>:57:10 - line:57:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:56:31 function_ref=unapplied)))))))
    (pattern_binding_decl
      (pattern_typed type='Int'
        (pattern_named type='Int' 'startIndex')
        (type_ident
          (component id='Int' bind=Swift.(file).Int))))
    (var_decl "startIndex" type='Int' interface type='Int' access=internal storage_kind=computed
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Int' access=internal getter_for=startIndex
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list)
        (brace_stmt
          (return_stmt
            (member_ref_expr type='Int' location=<<testFilePath>>:62:16 range=[<<testFilePath>>:62:10 - line:62:16] decl=Swift.(file).Array.startIndex [with Element]
              (load_expr implicit type='Array<Element>' location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:61:22 function_ref=unapplied))))))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Int' access=internal getter_for=startIndex
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (return_stmt
          (member_ref_expr type='Int' location=<<testFilePath>>:62:16 range=[<<testFilePath>>:62:10 - line:62:16] decl=Swift.(file).Array.startIndex [with Element]
            (load_expr implicit type='Array<Element>' location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:62:10 range=[<<testFilePath>>:62:10 - line:62:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:61:22 function_ref=unapplied)))))))
    (pattern_binding_decl
      (pattern_typed type='Int'
        (pattern_named type='Int' 'endIndex')
        (type_ident
          (component id='Int' bind=Swift.(file).Int))))
    (var_decl "endIndex" type='Int' interface type='Int' access=internal storage_kind=computed
      (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Int' access=internal getter_for=endIndex
        (parameter_list
          (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
        (parameter_list)
        (brace_stmt
          (return_stmt
            (member_ref_expr type='Int' location=<<testFilePath>>:66:16 range=[<<testFilePath>>:66:10 - line:66:16] decl=Swift.(file).Array.endIndex [with Element]
              (load_expr implicit type='Array<Element>' location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10]
                (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                  (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:65:20 function_ref=unapplied))))))))
    (accessor_decl 'anonname=<<memory address>>' interface type='<Element> (ArrayReference<Element>) -> () -> Int' access=internal getter_for=endIndex
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (return_stmt
          (member_ref_expr type='Int' location=<<testFilePath>>:66:16 range=[<<testFilePath>>:66:10 - line:66:16] decl=Swift.(file).Array.endIndex [with Element]
            (load_expr implicit type='Array<Element>' location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=read location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr implicit type='ArrayReference<Element>' location=<<testFilePath>>:66:10 range=[<<testFilePath>>:66:10 - line:66:10] decl=arrays.(file).ArrayReference.<anonymous>.self@<<testFilePath>>:65:20 function_ref=unapplied)))))))
    (func_decl "index(after:)" interface type='<Element> (ArrayReference<Element>) -> (Int) -> Int' access=internal
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "i" apiName=after type='Int' interface type='Int'))
      (result
        (type_ident
          (component id='Int' bind=Swift.(file).Int)))
      (brace_stmt
        (return_stmt
          (binary_expr type='Int' location=<<testFilePath>>:70:12 range=[<<testFilePath>>:70:10 - line:70:14] nothrow
            (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=<<testFilePath>>:70:12 range=[<<testFilePath>>:70:12 - line:70:12] nothrow
              (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=<<testFilePath>>:70:12 range=[<<testFilePath>>:70:12 - line:70:12] decl=Swift.(file).Int.+ function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:70:12 range=[<<testFilePath>>:70:12 - line:70:12] typerepr='Int'))
            (tuple_expr implicit type='(Int, Int)' location=<<testFilePath>>:70:10 range=[<<testFilePath>>:70:10 - line:70:14]
              (declref_expr type='Int' location=<<testFilePath>>:70:10 range=[<<testFilePath>>:70:10 - line:70:10] decl=arrays.(file).ArrayReference.index(after:).i@<<testFilePath>>:69:19 function_ref=unapplied)
              (call_expr implicit type='Int' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] nothrow arg_labels=_builtinIntegerLiteral:
                (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] nothrow
                  (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                  (type_expr implicit type='Int.Type' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] typerepr='Int'))
                (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] names=_builtinIntegerLiteral
                  (integer_literal_expr type='Int2048' location=<<testFilePath>>:70:14 range=[<<testFilePath>>:70:14 - line:70:14] value=1))))))))
    (func_decl "index(before:)" interface type='<Element> (ArrayReference<Element>) -> (Int) -> Int' access=internal
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "i" apiName=before type='Int' interface type='Int'))
      (result
        (type_ident
          (component id='Int' bind=Swift.(file).Int)))
      (brace_stmt
        (return_stmt
          (binary_expr type='Int' location=<<testFilePath>>:75:12 range=[<<testFilePath>>:75:10 - line:75:14] nothrow
            (dot_syntax_call_expr implicit type='(Int, Int) -> Int' location=<<testFilePath>>:75:12 range=[<<testFilePath>>:75:12 - line:75:12] nothrow
              (declref_expr type='(Int.Type) -> (Int, Int) -> Int' location=<<testFilePath>>:75:12 range=[<<testFilePath>>:75:12 - line:75:12] decl=Swift.(file).Int.- function_ref=unapplied)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:75:12 range=[<<testFilePath>>:75:12 - line:75:12] typerepr='Int'))
            (tuple_expr implicit type='(Int, Int)' location=<<testFilePath>>:75:10 range=[<<testFilePath>>:75:10 - line:75:14]
              (declref_expr type='Int' location=<<testFilePath>>:75:10 range=[<<testFilePath>>:75:10 - line:75:10] decl=arrays.(file).ArrayReference.index(before:).i@<<testFilePath>>:74:20 function_ref=unapplied)
              (call_expr implicit type='Int' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] nothrow arg_labels=_builtinIntegerLiteral:
                (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] nothrow
                  (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                  (type_expr implicit type='Int.Type' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] typerepr='Int'))
                (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] names=_builtinIntegerLiteral
                  (integer_literal_expr type='Int2048' location=<<testFilePath>>:75:14 range=[<<testFilePath>>:75:14 - line:75:14] value=1))))))))
    (func_decl "append(contentsOf:)" <S where S : Sequence, Element == S.Element> interface type='<Element, S where Element == S.Element, S : Sequence> (ArrayReference<Element>) -> (S) -> ()' access=internal captures=(<generic> )
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "newElements" apiName=contentsOf type='S' interface type='S'))
      (brace_stmt
        (call_expr type='()' location=<<testFilePath>>:80:14 range=[<<testFilePath>>:80:3 - line:80:44] nothrow arg_labels=contentsOf:
          (dot_syntax_call_expr type='(S) -> ()' location=<<testFilePath>>:80:14 range=[<<testFilePath>>:80:3 - line:80:14] nothrow
            (declref_expr type='(inout Array<Element>) -> (S) -> ()' location=<<testFilePath>>:80:14 range=[<<testFilePath>>:80:14 - line:80:14] decl=Swift.(file).Array.append(contentsOf:) [with Element, S[abstract:Sequence]] function_ref=single)
            (inout_expr implicit type='inout Array<Element>' location=<<testFilePath>>:80:3 range=[<<testFilePath>>:80:3 - line:80:8]
              (member_ref_expr type='@lvalue Array<Element>' accessKind=readwrite location=<<testFilePath>>:80:8 range=[<<testFilePath>>:80:3 - line:80:8] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element]
                (declref_expr type='ArrayReference<Element>' location=<<testFilePath>>:80:3 range=[<<testFilePath>>:80:3 - line:80:3] decl=arrays.(file).ArrayReference.append(contentsOf:).self@<<testFilePath>>:79:7 function_ref=unapplied))))
          (tuple_expr type='(contentsOf: S)' location=<<testFilePath>>:80:20 range=[<<testFilePath>>:80:20 - line:80:44] names=contentsOf
            (declref_expr type='S' location=<<testFilePath>>:80:33 range=[<<testFilePath>>:80:33 - line:80:33] decl=arrays.(file).ArrayReference.append(contentsOf:).newElements@<<testFilePath>>:79:28 function_ref=unapplied)))))
    (constructor_decl "init(_:)" <S where S : Sequence, Element == S.Element> interface type='<Element, S where Element == S.Element, S : Sequence> (ArrayReference<Element>.Type) -> (S) -> ArrayReference<Element>' access=internal captures=(<generic> ) required designated
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list
        (parameter "elements" type='S' interface type='S'))
      (brace_stmt
        (assign_expr
          (member_ref_expr type='@lvalue Array<Element>' accessKind=write location=<<testFilePath>>:84:8 range=[<<testFilePath>>:84:3 - line:84:8] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
            (declref_expr type='ArrayReference<Element>' location=<<testFilePath>>:84:3 range=[<<testFilePath>>:84:3 - line:84:3] decl=arrays.(file).ArrayReference.init(_:).self@<<testFilePath>>:83:11 function_ref=unapplied))
          (call_expr type='Array<ArrayReference<Element>.Element>' location=<<testFilePath>>:84:29 range=[<<testFilePath>>:84:16 - line:84:39] nothrow arg_labels=_:
            (constructor_ref_call_expr type='(S) -> Array<ArrayReference<Element>.Element>' location=<<testFilePath>>:84:29 range=[<<testFilePath>>:84:16 - line:84:29] nothrow
              (declref_expr implicit type='(Array<ArrayReference<Element>.Element>.Type) -> (S) -> Array<Element>' location=<<testFilePath>>:84:29 range=[<<testFilePath>>:84:29 - line:84:29] decl=Swift.(file).Array.init [with ArrayReference<Element>.Element, S[abstract:Sequence]] function_ref=single)
              (type_expr type='Array<ArrayReference<Element>.Element>.Type' location=<<testFilePath>>:84:16 range=[<<testFilePath>>:84:16 - line:84:29] typerepr='Array<Element>'))
            (paren_expr type='(S)' location=<<testFilePath>>:84:31 range=[<<testFilePath>>:84:30 - line:84:39]
              (declref_expr type='S' location=<<testFilePath>>:84:31 range=[<<testFilePath>>:84:31 - line:84:31] decl=arrays.(file).ArrayReference.init(_:).elements@<<testFilePath>>:83:21 function_ref=unapplied))))
        (return_stmt implicit)))
    (constructor_decl "init()" interface type='<Element> (ArrayReference<Element>.Type) -> () -> ArrayReference<Element>' access=internal required designated
      (parameter_list
        (parameter "self" type='ArrayReference<Element>' interface type='ArrayReference<Element>'))
      (parameter_list)
      (brace_stmt
        (assign_expr
          (member_ref_expr type='@lvalue Array<Element>' accessKind=write location=<<testFilePath>>:88:8 range=[<<testFilePath>>:88:3 - line:88:8] decl=arrays.(file).ArrayReference.array@<<testFilePath>>:30:6 [with Element] direct_to_storage
            (declref_expr type='ArrayReference<Element>' location=<<testFilePath>>:88:3 range=[<<testFilePath>>:88:3 - line:88:3] decl=arrays.(file).ArrayReference.init().self@<<testFilePath>>:87:11 function_ref=unapplied))
          (call_expr type='Array<ArrayReference<Element>.Element>' location=<<testFilePath>>:88:29 range=[<<testFilePath>>:88:16 - line:88:31] nothrow arg_labels=
            (constructor_ref_call_expr type='() -> Array<ArrayReference<Element>.Element>' location=<<testFilePath>>:88:29 range=[<<testFilePath>>:88:16 - line:88:29] nothrow
              (declref_expr implicit type='(Array<ArrayReference<Element>.Element>.Type) -> () -> Array<Element>' location=<<testFilePath>>:88:29 range=[<<testFilePath>>:88:29 - line:88:29] decl=Swift.(file).Array.init() [with ArrayReference<Element>.Element] function_ref=single)
              (type_expr type='Array<ArrayReference<Element>.Element>.Type' location=<<testFilePath>>:88:16 range=[<<testFilePath>>:88:16 - line:88:29] typerepr='Array<Element>'))
            (tuple_expr type='()' location=<<testFilePath>>:88:30 range=[<<testFilePath>>:88:30 - line:88:31])))
        (return_stmt implicit)))
    (destructor_decl implicit "deinit" interface type='<Element> (ArrayReference<Element>) -> () -> ()' access=internal @objc
      (parameter_list
        (parameter "self" interface type='ArrayReference<Element>'))
      (brace_stmt))
    (typealias implicit "Element" interface type='Element.Type' access=internal type='Element')
    (typealias implicit "Index" interface type='Int.Type' access=internal type='Int')
    (typealias implicit "SubSequence" interface type='Slice<ArrayReference<Element>>.Type' access=internal type='Slice<ArrayReference<Element>>')
    (typealias implicit "Iterator" interface type='IndexingIterator<ArrayReference<Element>>.Type' access=internal type='IndexingIterator<ArrayReference<Element>>')
    (typealias implicit "Indices" interface type='Range<Int>.Type' access=internal type='Range<Int>'))
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_typed type='ArrayReference<Int>'
          (pattern_named type='ArrayReference<Int>' 'array1')
          (type_ident
            (component id='ArrayReference' bind=arrays.(file).ArrayReference@<<testFilePath>>:24:7)))
        (array_expr type='ArrayReference<Int>' location=<<testFilePath>>:92:30 range=[<<testFilePath>>:92:30 - line:92:38]
          (call_expr implicit type='Int' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] nothrow arg_labels=_builtinIntegerLiteral:
            (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] nothrow
              (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] typerepr='Int'))
            (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] names=_builtinIntegerLiteral
              (integer_literal_expr type='Int2048' location=<<testFilePath>>:92:31 range=[<<testFilePath>>:92:31 - line:92:31] value=1)))
          (call_expr implicit type='Int' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] nothrow arg_labels=_builtinIntegerLiteral:
            (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] nothrow
              (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] typerepr='Int'))
            (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] names=_builtinIntegerLiteral
              (integer_literal_expr type='Int2048' location=<<testFilePath>>:92:34 range=[<<testFilePath>>:92:34 - line:92:34] value=2)))
          (call_expr implicit type='Int' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] nothrow arg_labels=_builtinIntegerLiteral:
            (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] nothrow
              (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
              (type_expr implicit type='Int.Type' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] typerepr='Int'))
            (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] names=_builtinIntegerLiteral
              (integer_literal_expr type='Int2048' location=<<testFilePath>>:92:37 range=[<<testFilePath>>:92:37 - line:92:37] value=3)))))
))
  (var_decl "array1" type='ArrayReference<Int>' interface type='ArrayReference<Int>' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (pattern_binding_decl
        (pattern_named type='ArrayReference<Int>' 'array2')
        (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:93:14 range=[<<testFilePath>>:93:14 - line:93:14] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied))
))
  (var_decl "array2" type='ArrayReference<Int>' interface type='ArrayReference<Int>' access=internal let storage_kind=stored)
  (top_level_code_decl
    (brace_stmt
      (assign_expr
        (subscript_expr type='@lvalue Int' accessKind=write location=<<testFilePath>>:94:7 range=[<<testFilePath>>:94:1 - line:94:9]  decl=arrays.(file).ArrayReference.subscript@<<testFilePath>>:42:2 [with Int] arg_labels=_:
          (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:94:1 range=[<<testFilePath>>:94:1 - line:94:1] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied)
          (paren_expr type='(Int)' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:7 - line:94:9]
            (call_expr implicit type='Int' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] nothrow arg_labels=_builtinIntegerLiteral:
              (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] nothrow
                (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                (type_expr implicit type='Int.Type' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] typerepr='Int'))
              (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] names=_builtinIntegerLiteral
                (integer_literal_expr type='Int2048' location=<<testFilePath>>:94:8 range=[<<testFilePath>>:94:8 - line:94:8] value=0)))))
        (call_expr implicit type='Int' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] nothrow arg_labels=_builtinIntegerLiteral:
          (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] nothrow
            (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
            (type_expr implicit type='Int.Type' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] typerepr='Int'))
          (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] names=_builtinIntegerLiteral
            (integer_literal_expr type='Int2048' location=<<testFilePath>>:94:13 range=[<<testFilePath>>:94:13 - line:94:13] value=10))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:95:1 range=[<<testFilePath>>:95:1 - line:95:13] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:95:1 range=[<<testFilePath>>:95:1 - line:95:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:95:7 range=[<<testFilePath>>:95:6 - line:95:13] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:95:7 range=[<<testFilePath>>:95:6 - line:95:13]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:95:7 range=[<<testFilePath>>:95:7 - line:95:7]
              (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:95:7 range=[<<testFilePath>>:95:7 - line:95:7] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:96:1 range=[<<testFilePath>>:96:1 - line:96:13] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:96:1 range=[<<testFilePath>>:96:1 - line:96:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:96:7 range=[<<testFilePath>>:96:6 - line:96:13] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:96:7 range=[<<testFilePath>>:96:6 - line:96:13]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:96:7 range=[<<testFilePath>>:96:7 - line:96:7]
              (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:96:7 range=[<<testFilePath>>:96:7 - line:96:7] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied)))))))
  (top_level_code_decl
    (brace_stmt
      (call_expr type='()' location=<<testFilePath>>:97:1 range=[<<testFilePath>>:97:1 - line:97:16] nothrow arg_labels=_:
        (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:97:1 range=[<<testFilePath>>:97:1 - line:97:1] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
        (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:97:13 range=[<<testFilePath>>:97:6 - line:97:16] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
          (paren_expr type='Any' location=<<testFilePath>>:97:13 range=[<<testFilePath>>:97:6 - line:97:16]
            (erasure_expr implicit type='Any' location=<<testFilePath>>:97:13 range=[<<testFilePath>>:97:7 - line:97:15]
              (load_expr implicit type='Int' location=<<testFilePath>>:97:13 range=[<<testFilePath>>:97:7 - line:97:15]
                (subscript_expr type='@lvalue Int' accessKind=read location=<<testFilePath>>:97:13 range=[<<testFilePath>>:97:7 - line:97:15]  decl=arrays.(file).ArrayReference.subscript@<<testFilePath>>:42:2 [with Int] arg_labels=_:
                  (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:97:7 range=[<<testFilePath>>:97:7 - line:97:7] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied)
                  (paren_expr type='(Int)' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:13 - line:97:15]
                    (call_expr implicit type='Int' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] nothrow arg_labels=_builtinIntegerLiteral:
                      (constructor_ref_call_expr implicit type='(_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] nothrow
                        (declref_expr implicit type='(Int.Type) -> (_MaxBuiltinIntegerType) -> Int' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] decl=Swift.(file).Int.init(_builtinIntegerLiteral:) function_ref=single)
                        (type_expr implicit type='Int.Type' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] typerepr='Int'))
                      (tuple_expr implicit type='(_builtinIntegerLiteral: Int2048)' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] names=_builtinIntegerLiteral
                        (integer_literal_expr type='Int2048' location=<<testFilePath>>:97:14 range=[<<testFilePath>>:97:14 - line:97:14] value=0))))))))))))
  (top_level_code_decl
    (brace_stmt
      (for_each_stmt
        (pattern_named type='Int' 'i')
        (pattern_named type='Int' 'i')
        (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied)
        (pattern_binding_decl implicit
          (pattern_named implicit '$i$generator')
          (call_expr implicit type='IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10] nothrow arg_labels=
            (dot_syntax_call_expr implicit type='() -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10] nothrow
              (declref_expr implicit type='(ArrayReference<Int>) -> () -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10] decl=Swift.(file).Collection.makeIterator() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
              (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied))
            (tuple_expr implicit type='()' location=<<testFilePath>>:99:10 range=[<<testFilePath>>:99:10 - line:99:10])))

        (call_expr implicit type='Int?' location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7] nothrow arg_labels=
          (dot_syntax_call_expr implicit type='() -> Int?' location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7] nothrow
            (declref_expr implicit type='(inout IndexingIterator<ArrayReference<Int>>) -> () -> Int?' location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7] decl=Swift.(file).IndexingIterator.next() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
            (inout_expr implicit type='inout IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7]
              (declref_expr implicit type='@lvalue IndexingIterator<ArrayReference<Int>>' accessKind=readwrite location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7] decl=arrays.(file).top-level code.$i$generator@<<testFilePath>>:99:7 direct_to_storage function_ref=unapplied)))
          (tuple_expr implicit type='()' location=<<testFilePath>>:99:7 range=[<<testFilePath>>:99:7 - line:99:7]))
        (brace_stmt
          (call_expr type='()' location=<<testFilePath>>:100:2 range=[<<testFilePath>>:100:2 - line:100:9] nothrow arg_labels=_:
            (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:100:2 range=[<<testFilePath>>:100:2 - line:100:2] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:100:8 range=[<<testFilePath>>:100:7 - line:100:9] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
              (paren_expr type='Any' location=<<testFilePath>>:100:8 range=[<<testFilePath>>:100:7 - line:100:9]
                (erasure_expr implicit type='Any' location=<<testFilePath>>:100:8 range=[<<testFilePath>>:100:8 - line:100:8]
                  (declref_expr type='Int' location=<<testFilePath>>:100:8 range=[<<testFilePath>>:100:8 - line:100:8] decl=arrays.(file).top-level code.i@<<testFilePath>>:99:5 function_ref=unapplied)))))))))
  (top_level_code_decl
    (brace_stmt
      (for_each_stmt
        (pattern_named type='Int' 'j')
        (pattern_named type='Int' 'j')
        (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied)
        (pattern_binding_decl implicit
          (pattern_named implicit '$j$generator')
          (call_expr implicit type='IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10] nothrow arg_labels=
            (dot_syntax_call_expr implicit type='() -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10] nothrow
              (declref_expr implicit type='(ArrayReference<Int>) -> () -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10] decl=Swift.(file).Collection.makeIterator() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
              (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied))
            (tuple_expr implicit type='()' location=<<testFilePath>>:103:10 range=[<<testFilePath>>:103:10 - line:103:10])))

        (call_expr implicit type='Int?' location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7] nothrow arg_labels=
          (dot_syntax_call_expr implicit type='() -> Int?' location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7] nothrow
            (declref_expr implicit type='(inout IndexingIterator<ArrayReference<Int>>) -> () -> Int?' location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7] decl=Swift.(file).IndexingIterator.next() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
            (inout_expr implicit type='inout IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7]
              (declref_expr implicit type='@lvalue IndexingIterator<ArrayReference<Int>>' accessKind=readwrite location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7] decl=arrays.(file).top-level code.$j$generator@<<testFilePath>>:103:7 direct_to_storage function_ref=unapplied)))
          (tuple_expr implicit type='()' location=<<testFilePath>>:103:7 range=[<<testFilePath>>:103:7 - line:103:7]))
        (brace_stmt
          (call_expr type='()' location=<<testFilePath>>:104:2 range=[<<testFilePath>>:104:2 - line:104:9] nothrow arg_labels=_:
            (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:104:2 range=[<<testFilePath>>:104:2 - line:104:2] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
            (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:104:8 range=[<<testFilePath>>:104:7 - line:104:9] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
              (paren_expr type='Any' location=<<testFilePath>>:104:8 range=[<<testFilePath>>:104:7 - line:104:9]
                (erasure_expr implicit type='Any' location=<<testFilePath>>:104:8 range=[<<testFilePath>>:104:8 - line:104:8]
                  (declref_expr type='Int' location=<<testFilePath>>:104:8 range=[<<testFilePath>>:104:8 - line:104:8] decl=arrays.(file).top-level code.j@<<testFilePath>>:103:5 function_ref=unapplied)))))))))
  (top_level_code_decl
    (brace_stmt
      (for_each_stmt
        (pattern_named type='Int' 'i')
        (pattern_named type='Int' 'i')
        (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied)
        (pattern_binding_decl implicit
          (pattern_named implicit '$i$generator')
          (call_expr implicit type='IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10] nothrow arg_labels=
            (dot_syntax_call_expr implicit type='() -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10] nothrow
              (declref_expr implicit type='(ArrayReference<Int>) -> () -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10] decl=Swift.(file).Collection.makeIterator() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
              (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10] decl=arrays.(file).array1@<<testFilePath>>:92:5 direct_to_storage function_ref=unapplied))
            (tuple_expr implicit type='()' location=<<testFilePath>>:107:10 range=[<<testFilePath>>:107:10 - line:107:10])))

        (call_expr implicit type='Int?' location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7] nothrow arg_labels=
          (dot_syntax_call_expr implicit type='() -> Int?' location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7] nothrow
            (declref_expr implicit type='(inout IndexingIterator<ArrayReference<Int>>) -> () -> Int?' location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7] decl=Swift.(file).IndexingIterator.next() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
            (inout_expr implicit type='inout IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7]
              (declref_expr implicit type='@lvalue IndexingIterator<ArrayReference<Int>>' accessKind=readwrite location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7] decl=arrays.(file).top-level code.$i$generator@<<testFilePath>>:107:7 direct_to_storage function_ref=unapplied)))
          (tuple_expr implicit type='()' location=<<testFilePath>>:107:7 range=[<<testFilePath>>:107:7 - line:107:7]))
        (brace_stmt
          (for_each_stmt
            (pattern_named type='Int' 'j')
            (pattern_named type='Int' 'j')
            (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied)
            (pattern_binding_decl implicit
              (pattern_named implicit '$j$generator')
              (call_expr implicit type='IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11] nothrow arg_labels=
                (dot_syntax_call_expr implicit type='() -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11] nothrow
                  (declref_expr implicit type='(ArrayReference<Int>) -> () -> IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11] decl=Swift.(file).Collection.makeIterator() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
                  (declref_expr type='ArrayReference<Int>' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11] decl=arrays.(file).array2@<<testFilePath>>:93:5 direct_to_storage function_ref=unapplied))
                (tuple_expr implicit type='()' location=<<testFilePath>>:108:11 range=[<<testFilePath>>:108:11 - line:108:11])))

            (call_expr implicit type='Int?' location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8] nothrow arg_labels=
              (dot_syntax_call_expr implicit type='() -> Int?' location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8] nothrow
                (declref_expr implicit type='(inout IndexingIterator<ArrayReference<Int>>) -> () -> Int?' location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8] decl=Swift.(file).IndexingIterator.next() [with ArrayReference<Int>[ArrayReference<Int>: specialize <Int> (<Element> ArrayReference<Element>: Collection module arrays)]] function_ref=single)
                (inout_expr implicit type='inout IndexingIterator<ArrayReference<Int>>' location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8]
                  (declref_expr implicit type='@lvalue IndexingIterator<ArrayReference<Int>>' accessKind=readwrite location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8] decl=arrays.(file).top-level code.$j$generator@<<testFilePath>>:108:8 direct_to_storage function_ref=unapplied)))
              (tuple_expr implicit type='()' location=<<testFilePath>>:108:8 range=[<<testFilePath>>:108:8 - line:108:8]))
            (brace_stmt
              (call_expr type='()' location=<<testFilePath>>:109:3 range=[<<testFilePath>>:109:3 - line:109:21] nothrow arg_labels=_:
                (declref_expr type='(Any..., String, String) -> ()' location=<<testFilePath>>:109:3 range=[<<testFilePath>>:109:3 - line:109:3] decl=Swift.(file).print(_:separator:terminator:) function_ref=single)
                (tuple_shuffle_expr implicit type='(Any..., separator: String, terminator: String)' location=<<testFilePath>>:109:9 range=[<<testFilePath>>:109:8 - line:109:21] scalar_to_tuple elements=[-2, -1, -1] variadic_sources=[0] default_args_owner=Swift.(file).print(_:separator:terminator:)
                  (paren_expr type='Any' location=<<testFilePath>>:109:9 range=[<<testFilePath>>:109:8 - line:109:21]
                    (erasure_expr implicit type='Any' location=<<testFilePath>>:109:9 range=[<<testFilePath>>:109:9 - line:109:9]
                      (interpolated_string_literal_expr type='String' location=<<testFilePath>>:109:9 range=[<<testFilePath>>:109:9 - line:109:9]
                        (string_literal_expr type='String' location=<<testFilePath>>:109:9 range=[<<testFilePath>>:109:9 - line:109:9] encoding=utf8 value="" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                        (paren_expr type='(Int)' location=<<testFilePath>>:109:12 range=[<<testFilePath>>:109:11 - line:109:13]
                          (declref_expr type='Int' location=<<testFilePath>>:109:12 range=[<<testFilePath>>:109:12 - line:109:12] decl=arrays.(file).top-level code.i@<<testFilePath>>:107:5 function_ref=unapplied))
                        (string_literal_expr type='String' location=<<testFilePath>>:109:14 range=[<<testFilePath>>:109:14 - line:109:14] encoding=utf8 value=", " builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)
                        (paren_expr type='(Int)' location=<<testFilePath>>:109:18 range=[<<testFilePath>>:109:17 - line:109:19]
                          (declref_expr type='Int' location=<<testFilePath>>:109:18 range=[<<testFilePath>>:109:18 - line:109:18] decl=arrays.(file).top-level code.j@<<testFilePath>>:108:6 function_ref=unapplied))
                        (string_literal_expr type='String' location=<<testFilePath>>:109:20 range=[<<testFilePath>>:109:20 - line:109:20] encoding=utf8 value="" builtin_initializer=Swift.(file).String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) initializer=**NULL**)))))))))))))
